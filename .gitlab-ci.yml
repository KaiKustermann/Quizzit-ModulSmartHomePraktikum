stages:
  - validate
  - api
  - bundle-api
  - publish-api
  - build-and-test
  - upload
  - release

variables:
  NPM_TOKEN: ${CI_JOB_TOKEN}
  # Package version can only contain numbers (0-9), and dots (.).
  # Must be in the format of X.Y.Z, i.e. should match /\A\d+\.\d+\.\d+\z/ regular expresion.
  # See https://docs.gitlab.com/ee/user/packages/generic_packages/#publish-a-package-file
  PACKAGE_VERSION: $CI_COMMIT_TAG
  LINUX_AMD64_BINARY: "quizzit-linux-amd64"
  LINUX_ARM_BINARY: "quizzit-linux-arm"
  WINDOWS_AMD64_BINARY: "quizzit-windows-64.exe"
  WINDOWS_386_BINARY: "quizzit-windows-32.exe"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/quizzit/${PACKAGE_VERSION}"

validate_asyncapi:
  stage: validate
  image: docker.io/hdmstuttgartquizzit/asyncapi-generator:0.2.0
  script:
    - asyncapi validate api/websocket-asyncapi.yaml

generate_asyncapi_typescript_packages:
  stage: api
  image: docker.io/hdmstuttgartquizzit/asyncapi-generator:0.2.0
  script:
    - asyncapi --version
    - tsc --version
    - echo "TYPESCRIPT - Generating Source Code from ASYNC-API specifications"
    - npm run generate:typescript:asyncapi
  artifacts:
    when: on_success
    expire_in: "1 hour"
    paths:
      - "api/typescript/src/asyncapi"

generate_openapi_typescript_models:
  stage: api
  image: 
    name: openapitools/openapi-generator-cli:v7.3.0
    entrypoint: ["/bin/sh", "-c"]
  script:
    - echo "Creating TYPESCRIPT DIR for openapi code"
    - mkdir -p api/typescript/src/openapi
    - echo "Generating TYPESCRIPT Source Code from OPENAPI specifications"
    - java -jar /opt/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar generate -i ./api/openapi.yaml -g typescript-rxjs -o ./api/typescript/src/tmp
    - echo "Moving TYPESCRIPT files to target DIR"
    - mv ./api/typescript/src/tmp/*.ts ./api/typescript/src/tmp/apis ./api/typescript/src/tmp/models ./api/typescript/src/openapi/
  artifacts:
    when: on_success
    expire_in: "1 hour"
    paths:
      - "api/typescript/src/openapi"

bundle_typescript_package:
  stage: bundle-api
  dependencies:
    - "generate_asyncapi_typescript_packages"
    - "generate_openapi_typescript_models"
  image: docker.io/hdmstuttgartquizzit/asyncapi-generator:0.2.0
  script:
    - echo "TYPESCRIPT - Entering api/typescript DIR"
    - cd ./api/typescript
    - echo "TYPESCRIPT - Compiling to js and .d.ts files"
    - npm run module
  artifacts:
    when: on_success
    expire_in: "1 hour"
    paths:
      - "api/typescript/dist"

publish_typescript_package:
  stage: publish-api
  dependencies:
    - "bundle_typescript_package"
  image: docker.io/hdmstuttgartquizzit/asyncapi-generator:0.2.0
  script:
    - cd api/typescript
    - echo "TYPESCRIPT - Publishing Module"
    - npm publish
  rules:
    - when: manual
      if: $CI_PIPELINE_SOURCE != "merge_request_event"
      allow_failure: true

generate_asyncapi_golang_models:
  stage: api
  image: docker.io/hdmstuttgartquizzit/asyncapi-generator:0.1.0
  script:
    - echo "Generating GOLANG Source Code from ASYNC-API specifications"
    - npm run generate:golang:asyncapi
  artifacts:
    when: on_success
    expire_in: "1 hour"
    paths:
      - "internal/generated-sources/asyncapi"

generate_openapi_golang_models:
  stage: api
  image: 
    name: openapitools/openapi-generator-cli:v7.3.0
    entrypoint: ["/bin/sh", "-c"]
  script:
    - echo "Creating GOLANG DIR for openapi code"
    - mkdir -p internal/generated-sources/openapi
    - echo "Generating GOLANG Source Code from OPENAPI specifications"
    - java -jar /opt/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar generate -i ./api/openapi.yaml -g go -o ./internal/generated-sources/tmp
    - echo "Moving GOLANG files to target DIR"
    - mv ./internal/generated-sources/tmp/model_*.go ./internal/generated-sources/tmp/utils.go ./internal/generated-sources/openapi/
  artifacts:
    when: on_success
    expire_in: "1 hour"
    paths:
      - "internal/generated-sources/openapi"

# https://go.dev/doc/install/source#environment
build_go:
  stage: build-and-test
  needs:
    - "generate_asyncapi_golang_models"
    - "generate_openapi_golang_models"
  image: docker.io/golang:1.20.3
  script:
    - echo "Setting up ..."
    - go mod download
    - echo "Running tests ..."
    - go test ./test
    - echo "Building for Linux AMD64"
    - GOOS=linux GOARCH=amd64 go build -o build/${LINUX_AMD64_BINARY} cmd/quizzit/quizzit.go
    - echo "Building for Linux arm"
    - GOOS=linux GOARCH=arm go build -o build/${LINUX_ARM_BINARY} cmd/quizzit/quizzit.go
    - echo "Building for Windows AMD64"
    - GOOS=windows GOARCH=amd64 go build -o build/${WINDOWS_AMD64_BINARY} cmd/quizzit/quizzit.go
    - echo "Building for Windows 386"
    - GOOS=windows GOARCH=386 go build -o build/${WINDOWS_386_BINARY} cmd/quizzit/quizzit.go
  artifacts:
    when: on_success
    expire_in: "1 day"
    paths:
      - "build"

# See https://gitlab.mi.hdm-stuttgart.de/help/user/project/releases/release_fields.md#use-a-generic-package-for-attaching-binaries
upload_binaries:
  stage: upload
  needs:
    - "build_go"
  image: docker.io/curlimages/curl:8.00.1
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/${LINUX_AMD64_BINARY} "${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_BINARY}"
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/${LINUX_ARM_BINARY} "${PACKAGE_REGISTRY_URL}/${LINUX_ARM_BINARY}"
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/${WINDOWS_AMD64_BINARY} "${PACKAGE_REGISTRY_URL}/${WINDOWS_AMD64_BINARY}"
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/${WINDOWS_386_BINARY} "${PACKAGE_REGISTRY_URL}/${WINDOWS_386_BINARY}"

# See https://gitlab.mi.hdm-stuttgart.de/help/user/project/releases/release_fields.md#use-a-generic-package-for-attaching-binaries
release_job:
  stage: release
  needs:
    - "upload_binaries"
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  script:
    - echo "running release_job"
  release:
    name: 'Release $CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: Linux AMD64
          url: "${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_BINARY}"
        - name: Linux ARM
          url: "${PACKAGE_REGISTRY_URL}/${LINUX_ARM_BINARY}"
        - name: Windows 64bit
          url: "${PACKAGE_REGISTRY_URL}/${WINDOWS_AMD64_BINARY}"
        - name: Windows 32bit
          url: "${PACKAGE_REGISTRY_URL}/${WINDOWS_386_BINARY}"
