asyncapi: 2.6.0
id: "https://quizzit.hdm-stuttgart.de"
defaultContentType: application/json
tags:
  - name: "sender:backend"
    description: Event sent by the backend (e.G. 'game')
  - name: "sender:client"
    description: Event sent by the client (e.G. 'player')
info:
  title: Quizzit
  description: A quiz game for elderly people
  version: 0.7.0
  license:
    name: not licensed
  contact:
    name: "H3rby7"
    email: "H3rby7@users.noreply.github.com"
    url: "https://github.com/h3rby7"
servers:
  local:
    url: localhost:8080/ws
    protocol: websocket
    description: Local development
channels:
  /:
    subscribe:
      tags:
      - name: "sender:backend"
      operationId: "process"
      message:
        messageId: "processMessage"
        description: "An event sent by the backend."
        payload:
          $ref: "#/components/schemas/WebsocketMessageSubscribe"
    publish:
      tags:
      - name: "sender:client"
      operationId: "send"
      message:
        messageId: "sendMessage"
        description: An event sent to the backend.
        payload:
          $ref: "#/components/schemas/WebsocketMessagePublish"
components:
  schemas:
    # *************************************************************************
    # **** START SYSTEM SCHEMAS ***********************************************
    # *************************************************************************
    Health:
      title: Health
      description: Health Information
      type: object
      properties: 
        healthy:
          type: boolean
      additionalProperties: false
      required:
        - "healthy"
    # *************************************************************************
    # **** END SYSTEM SCHEMAS *************************************************
    # **** START UTILITY SCHEMAS **********************************************
    # *************************************************************************
    Id:
      title: Identifier
      description: A unique ID
      type: string
    MessageTypeSubscribe:
      title: Message Type Subscribe
      description: Sent by backend -> Identifies the type of the message
      type: string
      # POSSIBLE CONTENTS:
      #   - "system/Health"
      #   - "game/generic/ErrorFeedback"
      #   - "game/generic/PlayerWonPrompt"
      #   - "game/setup/Welcome"
      #   - "game/setup/SelectPlayerCount"
      #   - "game/question/Question"
      #   - "game/question/CorrectnessFeedback"
      #   - "game/turn/PassToSpecificPlayer"
      #   - "game/turn/PassToNewPlayerPrompt"
      #   - "game/turn/NewPlayerColorPrompt"
      #   - "game/turn/RemindPlayerColorPrompt"
      #   - "game/die/RollCategoryPrompt"
      #   - "game/die/CategoryResult"
      # note: the 'enum' code generation produces incompatible code for golang and ts, so we use strings
    WebsocketMessageSubscribe:
      title: Websocket Message Subscribe
      description: Sent by backend -> Envelope for WSS Messages
      type: object
      properties:
        correlationId:
          $ref: "#/components/schemas/Id"
        messageType:
          $ref: "#/components/schemas/MessageTypeSubscribe"
        body:
          description: Message content
          oneOf: 
            - $ref: "#/components/schemas/Health"
            - $ref: "#/components/schemas/Question"
            - $ref: "#/components/schemas/CorrectnessFeedback"
            - $ref: "#/components/schemas/PlayerConfirm"
            - $ref: "#/components/schemas/ErrorFeedback"
            - $ref: "#/components/schemas/WelcomePrompt"
            - $ref: "#/components/schemas/SelectPlayerCountPrompt"
            - $ref: "#/components/schemas/PassToSpecificPlayerPrompt"
            - $ref: "#/components/schemas/RollCategoryPrompt"
            - $ref: "#/components/schemas/CategoryResult"
            - $ref: "#/components/schemas/PassToNewPlayerPrompt"
            - $ref: "#/components/schemas/NewPlayerColorPrompt"
            - $ref: "#/components/schemas/RemindPlayerColorPrompt"
            - $ref: "#/components/schemas/PlayerWonPrompt"
        playerState:
          $ref: "#/components/schemas/PlayerState"
      additionalProperties: false
      required:
        - correlationId
        - messageType
        - body
    MessageTypePublish:
      title: Message Type Publish
      description: Sent by client(s) -> Identifies the type of the message
      type: string
      # POSSIBLE CONTENTS:
      #   - "player/question/SubmitAnswer"
      #   - "player/question/UseJoker"
      #   - "player/generic/Confirm"
      #   - "player/setup/SubmitPlayerCount"
      #   - "player/die/DigitalCategoryRollRequest"
      # note: the 'enum' code generation produces incompatible code for golang and ts, so we use strings
    WebsocketMessagePublish:
      title: Websocket Message Publish
      description: Sent by client(s) -> Envelope for WSS Messages
      type: object
      properties:
        correlationId:
          $ref: "#/components/schemas/Id"
        messageType:
          $ref: "#/components/schemas/MessageTypePublish"
        body:
          description: Message content
          oneOf: 
            - $ref: "#/components/schemas/SubmitAnswer"
            - $ref: "#/components/schemas/UseJoker"
            - $ref: "#/components/schemas/PlayerConfirm"
            - $ref: "#/components/schemas/SubmitPlayerCount"
            - $ref: "#/components/schemas/DigitalCategoryRollRequest"
      additionalProperties: false
      required:
        - correlationId
        - messageType
        - body
    # *************************************************************************
    # **** END UTILITY SCHEMAS ************************************************
    # **** START GAME SCHEMAS *************************************************
    # *************************************************************************
    PossibleAnswer:
      title: Possible Answer
      description: One possible answer to a question.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        answer:
          title: Answer Text
          description: The actual answer text to be displayed to the player during the game.
          type: string
        isDisabled:
          title: Is answer disabled
          description: Boolen to indicate if the answer is disabled (by joker usage)
          type: boolean
      additionalProperties: false
      required:
        - id
        - answer
    Question:
      title: Question
      description: Represents a question inside the game
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        query:
          type: string
          description: The actual question text.
        answers:
          title: Possible answers
          description: The possible, not necessarily correct, answers.
          type: array
          minItems: 4
          maxItems: 4
          items:
            $ref: "#/components/schemas/PossibleAnswer"
        category: 
          type: string
          description: The category of the question. 
      additionalProperties: false
      required:
        - id
        - query
        - answers
    SubmitAnswer:
      title: Submit Answer
      description: The submitted answer of a player to a question.
      type: object
      properties:
        questionId:
          $ref: "#/components/schemas/Id"
          description: The ID of the question the player is answering.
        answerId:
          $ref: "#/components/schemas/Id"
          description: The ID of the chosen/submitted answer of the player.
      additionalProperties: false
      required:
        - questionId
        - answerId
    CorrectnessFeedback:
      title: Correctness Feedback
      description: Feedback on the correctness of an answer.
      type: object
      properties:
        selectedAnswerIsCorrect:
          type: boolean
        correctAnswer:
          $ref: "#/components/schemas/PossibleAnswer"
          description: The correct answer to the posed question.
        selectedAnswer:
          $ref: "#/components/schemas/PossibleAnswer"
          description: The answer selected by the player.
        question:
          $ref: "#/components/schemas/Question"
          description: The posed question.
      additionalProperties: false
      required:
        - selectedAnswerIsCorrect
        - correctAnswer
        - selectedAnswer
        - question
    PlayerConfirm:
      title: Player confirm
      description: Generic message to continue the game flow (e.G. when waiting for a player confirmation)
      type: object
      additionalProperties: false
    ErrorFeedback:
      title: Error Feedback
      description: Feedback when receiving a Message that cannot be handled
      type: object
      properties: 
        receivedMessage:
          $ref: "#/components/schemas/WebsocketMessagePublish"
        errorMessage:
          type: string
      additionalProperties: true
    PlayerScores:
      title: "Player Scores"
      description: "List containing player scores. PlayerID = index (e.g. player 0's score is at index 0, 1 at 1, 2 at 2, etc.)"
      type: array
      items:
        type: integer
    PlayerState:
      title: "Player State"
      description: "Contains the active player and player scores."
      type: object
      properties:
        activePlayerId: 
          type: integer
        scores:
          $ref: "#/components/schemas/PlayerScores"
      additionalProperties: false
      required:
        - activePlayerId
        - scores
    WelcomePrompt:
      title: Welcome Prompt
      description: Prompt to -> Display the Welcome Message
      type: object
      additionalProperties: false
    SelectPlayerCountPrompt:
      title: Select Player Count Prompt
      description: "Prompts the player to select the player count"
      type: object
      additionalProperties: false
    SubmitPlayerCount:
      title: Submit player count
      description: Inform backend of the chosen player count
      type: integer
      additionalProperties: false
    PassToSpecificPlayerPrompt:
      title: Pass to specific player prompt
      description: "Prompts the player to pass the controller to the given other player (that already knows their color)"
      type: object
      properties: 
        targetPlayerId:
          type: integer
      additionalProperties: false
      required:
        - targetPlayerId
    RollCategoryPrompt:
      title: "Roll Category Prompt"
      description: "Prompts the player to roll a category"
      type: object
      additionalProperties: false
    DigitalCategoryRollRequest:
      title: "Digital Category Roll Request"
      description: "Player requests from backend a digital category roll (as opposed to using an analog die)"
      type: object
      additionalProperties: false
    CategoryResult:
        title: "Category Result"
        description: "Transfer to game step -> Display the rolled category"
        type: object
        properties:
          category:
            type: string
        additionalProperties: false
        required:
          - category
    PassToNewPlayerPrompt:
      title: "Pass to new player"
      description: "Prompts the player to pass the controller to another new player, happens in the first round of the game"
      type: object
      additionalProperties: false
    NewPlayerColorPrompt:
      title: "New Player Color Prompt"
      description: "Prompts the frontend to display the color of a specific player"
      type: object
      properties: 
        targetPlayerId:
          type: integer
      additionalProperties: false
      required:
        - targetPlayerId
    RemindPlayerColorPrompt:
      title: "Remind Player Color Prompt"
      description: "Prompts the frontend to remind the player of his color"
      type: object
      properties: 
        targetPlayerId:
          type: integer
      additionalProperties: false
      required:
        - targetPlayerId
    PlayerWonPrompt:
      title: "Player Won Prompt"
      description: "Event that is send when a player has won, indicates the victor by the id of the player"
      type: object
      properties: 
        playerId:
          type: integer
      additionalProperties: false
      required:
        - targetPlayerId
    UseJoker:
      title: "Use Joker"
      description: "Event that is send from the controller when a player uses a joker"
      type: object
      additionalProperties: false
    # *************************************************************************
    # **** END GAME SCHEMAS ***************************************************
