asyncapi: 2.6.0
id: "https://quizzit.hdm-stuttgart.de"
defaultContentType: application/json
tags:
  - name: "sender:backend"
    description: Event sent by the backend (e.G. 'game')
  - name: "sender:client"
    description: Event sent by the client (e.G. 'player')
info:
  title: Quizzit
  description: An adaptive hybrid boardgame
  version: 0.1.0
  license:
    name: not licensed
  contact:
    name: "H3rby7"
    email: "H3rby7@users.noreply.github.com"
    url: "https://github.com/h3rby7"
servers:
  local:
    url: localhost
    protocol: websocket
    description: Local development
channels:
  /:
    subscribe:
      tags:
      - name: "sender:backend"
      operationId: "process"
      message:
        messageId: "processMessage"
        description: An event sent by the backend.
        payload:
          $ref: "#/components/schemas/WebsocketMessageSubscribe"
    publish:
      tags:
      - name: "sender:client"
      operationId: "send"
      message:
        messageId: "sendMessage"
        description: An event sent to the backend.
        payload:
          $ref: "#/components/schemas/WebsocketMessagePublish"
components:
  schemas:
    Id:
      title: Identifier
      description: A unique ID
      type: string
    Health:
      title: Health
      description: Health Information
      type: object
      properties: 
        healthy:
          type: boolean
      additionalProperties: false
      required:
        - "healthy"
    MessageTypeSubscribe:
      title: Message Type Subscribe
      description: Identifies the type of the message
      type: string
      # enum:
      #   - "system/Health"
      #   - "game/generic/ErrorFeedback"
      #   - "game/question/Question"
      #   - "game/question/CorrectnessFeedback"
    MessageTypePublish:
      title: Message Type Publish
      description: Identifies the type of the message
      type: string
      # enum:
      #   - "player/question/SubmitAnswer"
      #   - "player/generic/Confirm"
    WebsocketMessageSubscribe:
      title: Websocket Message Subscribe
      description: Envelope for WSS Messages
      type: object
      properties:
        correlationId:
          $ref: "#/components/schemas/Id"
        messageType:
          $ref: "#/components/schemas/MessageTypeSubscribe"
        body:
          description: Message content
          oneOf: 
            - $ref: "#/components/schemas/Health"
            - $ref: "#/components/schemas/Question"
            - $ref: "#/components/schemas/CorrectnessFeedback"
            - $ref: "#/components/schemas/PlayerConfirm"
            - $ref: "#/components/schemas/ErrorFeedback"
      additionalProperties: false
      required:
        - correlationId
        - messageType
        - body
    WebsocketMessagePublish:
      title: Websocket Message Publish
      description: Envelope for WSS Messages
      type: object
      properties:
        correlationId:
          $ref: "#/components/schemas/Id"
        messageType:
          $ref: "#/components/schemas/MessageTypePublish"
        body:
          description: Message content
          oneOf: 
            - $ref: "#/components/schemas/SubmitAnswer"
      additionalProperties: false
      required:
        - correlationId
        - messageType
        - body
    PossibleAnswer:
      title: Possible Answer
      description: One possible answer to a question.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        answer:
          title: Answer Text
          description: The actual answer text to be displayed to the player during the game.
          type: string
      additionalProperties: false
      required:
        - id
        - answer
    Question:
      title: Question
      description: Represents a question inside the game
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        query:
          type: string
          description: The actual question text.
        answers:
          title: Possible answers
          description: The possible, not necessarily correct, answers.
          type: array
          minItems: 4
          maxItems: 4
          items:
            $ref: "#/components/schemas/PossibleAnswer"
      additionalProperties: false
      required:
        - id
        - query
        - answers
    SubmitAnswer:
      title: Submit Answer
      description: The submitted answer of a player to a question.
      type: object
      properties:
        questionId:
          $ref: "#/components/schemas/Id"
          description: The ID of the question the player is answering.
        answerId:
          $ref: "#/components/schemas/Id"
          description: The ID of the chosen/submitted answer of the player.
      additionalProperties: false
      required:
        - questionId
        - answerId
    CorrectnessFeedback:
      title: Correctness Feedback
      description: Feedback on the correctness of an answer.
      type: object
      properties:
        selectedAnswerIsCorrect:
          type: boolean
        correctAnswer:
          $ref: "#/components/schemas/PossibleAnswer"
          description: The correct answer to the posed question.
        selectedAnswer:
          $ref: "#/components/schemas/PossibleAnswer"
          description: The answer selected by the player.
        question:
          $ref: "#/components/schemas/Question"
          description: The posed question.
      additionalProperties: false
      required:
        - selectedAnswerIsCorrect
        - correctAnswer
        - selectedAnswer
        - question
    PlayerConfirm:
      title: Player confirm
      description: Generic message to continue the game flow (e.G. when waiting for a player confirmation)
      type: object
      additionalProperties: false
    ErrorFeedback:
      title: Error Feedback
      description: Feedback when receiving a Message that cannot be handled
      type: object
      properties: 
        receivedMessage:
          $ref: "#/components/schemas/WebsocketMessagePublish"
        errorMessage:
          type: string
      additionalProperties: true
